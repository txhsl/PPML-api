package org.txhsl.ppml.api.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.StaticArray7;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class DataSets_sol_DataSets extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b506040805180820190915260048082527f50504d4c00000000000000000000000000000000000000000000000000000000602090920191825262000058916000916200005f565b5062000104565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a257805160ff1916838001178555620000d2565b82800160010185558215620000d2579182015b82811115620000d2578251825591602001919060010190620000b5565b50620000e0929150620000e4565b5090565b6200010191905b80821115620000e05760008155600101620000eb565b90565b6121f580620001146000396000f3fe608060405234801561001057600080fd5b5060043610610112576000357c0100000000000000000000000000000000000000000000000000000000900480637a308a4c116100b4578063b099741c11610083578063b099741c146106f6578063cbad3fbd146107e4578063e35cf0ca146108a1578063eeeac01e1461094757610112565b80637a308a4c1461057e578063889120f81461058657806393f89e2a1461062e578063997da8d4146106ee57610112565b8063156d081e116100f0578063156d081e146102565780634aaf4a121461040c5780635727dc5c146104ce57806369d0100c146104d657610112565b806303a507be1461011757806306fdde03146101315780630e3df78a146101ae575b600080fd5b61011f61094f565b60408051918252519081900360200190f35b610139610973565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610139600480360360408110156101c457600080fd5b8101906020810181356401000000008111156101df57600080fd5b8201836020820111156101f157600080fd5b8035906020019184600183028401116401000000008311171561021357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610a01915050565b61040a6004803603606081101561026c57600080fd5b81019060208101813564010000000081111561028757600080fd5b82018360208201111561029957600080fd5b803590602001918460018302840111640100000000831117156102bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561030e57600080fd5b82018360208201111561032057600080fd5b8035906020019184600183028401116401000000008311171561034257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460018302840111640100000000831117156103c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b08945050505050565b005b6104b26004803603602081101561042257600080fd5b81019060208101813564010000000081111561043d57600080fd5b82018360208201111561044f57600080fd5b8035906020019184600183028401116401000000008311171561047157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ecd945050505050565b60408051600160a060020a039092168252519081900360200190f35b61011f610f3e565b610139600480360360408110156104ec57600080fd5b81019060208101813564010000000081111561050757600080fd5b82018360208201111561051957600080fd5b8035906020019184600183028401116401000000008311171561053b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610f43915050565b61011f61100f565b61011f6004803603604081101561059c57600080fd5b8101906020810181356401000000008111156105b757600080fd5b8201836020820111156105c957600080fd5b803590602001918460018302840111640100000000831117156105eb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611033915050565b61040a600480360360a081101561064457600080fd5b81019060208101813564010000000081111561065f57600080fd5b82018360208201111561067157600080fd5b8035906020019184600183028401116401000000008311171561069357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050600160a060020a0383351693505050602081013590604081013590606001356110ad565b61011f611544565b6107ac6004803603604081101561070c57600080fd5b600160a060020a03823516919081019060408101602082013564010000000081111561073757600080fd5b82018360208201111561074957600080fd5b8035906020019184600183028401116401000000008311171561076b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611549945050505050565b604051808260e080838360005b838110156107d15781810151838201526020016107b9565b5050505090500191505060405180910390f35b61040a600480360360c08110156107fa57600080fd5b81019060208101813564010000000081111561081557600080fd5b82018360208201111561082757600080fd5b8035906020019184600183028401116401000000008311171561084957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602081013590604081013590606081013590608001356118e6565b61011f600480360360208110156108b757600080fd5b8101906020810181356401000000008111156108d257600080fd5b8201836020820111156108e457600080fd5b8035906020019184600183028401116401000000008311171561090657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ab3945050505050565b61011f611b1e565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179881565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109f95780601f106109ce576101008083540402835291602001916109f9565b820191906000526020600020905b8154815290600101906020018083116109dc57829003601f168201915b505050505081565b60606001836040518082805190602001908083835b60208310610a355780518252601f199092019160209182019101610a16565b518151600019602094850361010090810a8201928316921993909316919091179092529490920196875260408051978890038201882060008b81526009909101835281902060029081018054601f600182161590980290950190941604948501829004820288018201905283875290945091925050830182828015610afb5780601f10610ad057610100808354040283529160200191610afb565b820191906000526020600020905b815481529060010190602001808311610ade57829003601f168201915b5050505050905092915050565b6001836040518082805190602001908083835b60208310610b3a5780518252601f199092019160209182019101610b1b565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a031633149150610bc99050576040805160e560020a62461bcd02815260206004820152601260248201527f5065726d697373696f6e2064656e6965642e0000000000000000000000000000604482015290519081900360640190fd5b6001836040518082805190602001908083835b60208310610bfb5780518252601f199092019160209182019101610bdc565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185206001908101805482019055606086018252878652428684015285820187905290518851919450889350918291908401908083835b60208310610c7a5780518252601f199092019160209182019101610c5b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060090160006001866040518082805190602001908083835b60208310610ce45780518252601f199092019160209182019101610cc5565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820190942060010154855284810195909552505001600020825180519192610d39928492909101906120f0565b50602082810151600183015560408301518051610d5c92600285019201906120f0565b509050507fc3de291eeb89128edaa6c06d759763df20504e9534da2ecb860c2c4efe148bfc836001856040518082805190602001908083835b60208310610db45780518252601f199092019160209182019101610d95565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520600101548583018190526060808752875190870152865190958a9550935083929183019160808401919088019080838360005b83811015610e2b578181015183820152602001610e13565b50505050905090810190601f168015610e585780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610e8b578181015183820152602001610e73565b50505050905090810190601f168015610eb85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b60006001826040518082805190602001908083835b60208310610f015780518252601f199092019160209182019101610ee2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316949350505050565b600781565b60606001836040518082805190602001908083835b60208310610f775780518252601f199092019160209182019101610f58565b518151600019602094850361010090810a8201928316921993909316919091179092529490920196875260408051978890038201882060008b8152600990910183528190208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015610afb5780601f10610ad057610100808354040283529160200191610afb565b7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b881565b60006001836040518082805190602001908083835b602083106110675780518252601f199092019160209182019101611048565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382019094206000968752600901905250509091206001015492915050565b6001856040518082805190602001908083835b602083106110df5780518252601f1990920191602091820191016110c0565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03163314915061116e9050576040805160e560020a62461bcd02815260206004820152601260248201527f5065726d697373696f6e2064656e6965642e0000000000000000000000000000604482015290519081900360640190fd5b6000806000806112578760018b6040518082805190602001908083835b602083106111aa5780518252601f19909201916020918201910161118b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002016000015460018c6040518082805190602001908083835b602083106112165780518252601f1990920191602091820191016111f7565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600301549150600090506401000003d019611b28565b80945081955050506113428760018b6040518082805190602001908083835b602083106112955780518252601f199092019160209182019101611276565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002016002015460018c6040518082805190602001908083835b602083106113015780518252601f1990920191602091820191016112e2565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600501549150600090506401000003d019611b28565b809250819350505060e06040519081016040528085815260200184815260200183815260200182815260200160018b6040518082805190602001908083835b602083106113a05780518252601f199092019160209182019101611381565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382019094206006015485528481018c90529383018a90525050600160a060020a038b1660009081526002835281902090518c5191928d9282918401908083835b602083106114275780518252601f199092019160209182019101611408565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208651815586830151600182015586820151600282015560608088015160038301556080880151600483015560a0880151600583015560c090970151600690910155600160a060020a038e16858301528085528e51908501528d517f1c58f961621614a71280aeb2dfc04618928d6699e45a7551ab0cb33412f200cc958f958f955093508392908301919086019080838360005b838110156114fe5781810151838201526020016114e6565b50505050905090810190601f16801561152b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050505050565b600081565b61155161216e565b60e0604051908101604052806002600086600160a060020a0316600160a060020a03168152602001908152602001600020846040518082805190602001908083835b602083106115b25780518252601f199092019160209182019101611593565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420548552600160a060020a038916600090815260028252849020935188519582019589945090925082918401908083835b6020831061162e5780518252601f19909201916020918201910161160f565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420600101548552600160a060020a038916600090815260028252849020935188519582019589945090925082918401908083835b602083106116ad5780518252601f19909201916020918201910161168e565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382019094206002908101548652600160a060020a038a166000908152908252849020935188519582019589945090925082918401908083835b6020831061172d5780518252601f19909201916020918201910161170e565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420600301548552600160a060020a038916600090815260028252849020935188519582019589945090925082918401908083835b602083106117ac5780518252601f19909201916020918201910161178d565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420600401548552600160a060020a038916600090815260028252849020935188519582019589945090925082918401908083835b6020831061182b5780518252601f19909201916020918201910161180c565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420600501548552600160a060020a038916600090815260028252849020935188519582019589945090925082918401908083835b602083106118aa5780518252601f19909201916020918201910161188b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600601549092525090949350505050565b60606040519081016040528033600160a060020a031681526020016000815260200160e0604051908101604052808881526020018781526020018681526020018581526020018481526020016000815260200160008152508152506001876040518082805190602001908083835b602083106119735780518252601f199092019160209182019101611954565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208651815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161781558683015160018201559581015180516002880155808301516003880155808201516004880155606081015160058801556080810151600688015560a0810151600788015560c001516008909601959095558084528a51848201528a517fcd448c18eaeb22d8a2bdee65765801e4c87e17615b80df5ee1b4695b244ee16c958c95945084935083019185019080838360005b83811015611a71578181015183820152602001611a59565b50505050905090810190601f168015611a9e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1505050505050565b60006001826040518082805190602001908083835b60208310611ae75780518252601f199092019160209182019101611ac8565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060010154949350505050565b6401000003d01981565b6000806000806000611b3f8a8a8a60018b8b611b62565b925092509250611b5183838389611bdb565b945094505050509550959350505050565b60008080881515611b7a575086915085905084611bcf565b8860008060015b8315611bc6576001841615611ba757611b9f8383838f8f8f8e611c3a565b919450925090505b600284049350611bba8c8c8c8c8c611eec565b919d509b509950611b81565b91955093509150505b96509650969350505050565b6000806000611bea858561202a565b9050600084801515611bf857fe5b8283099050600085801515611c0957fe5b828a099050600086801515611c1a57fe5b87801515611c2457fe5b8486098a09919a91995090975050505050505050565b6000808089158015611c4a575088155b15611c5c575085915084905083611edf565b86158015611c68575085155b15611c7a575088915087905086611edf565b611c8261218d565b84801515611c8c57fe5b898a09815284801515611c9b57fe5b81518a09602082015284801515611cae57fe5b868709604082015284801515611cc057fe5b60408201518709606082015260408051608081019091528086801515611ce257fe5b60408401518e09815260200186801515611cf857fe5b60608401518d09815260200186801515611d0e57fe5b83518b09815260200186801515611d2157fe5b60208401518a09905260408101518151919250141580611d4957506060810151602082015114155b1515611d9f576040805160e560020a62461bcd02815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000604482015290519081900360640190fd5b611da761218d565b85801515611db157fe5b825160408401519088039008815285801515611dc957fe5b602083015160608401519088039008602082015285801515611de757fe5b81518009604082015285801515611dfa57fe5b81516040830151096060820152600086801515611e1357fe5b6060830151880388801515611e2457fe5b6020850151800908905086801515611e3857fe5b87801515611e4257fe5b88801515611e4c57fe5b6040850151865109600209880382089050600087801515611e6957fe5b88801515611e7357fe5b838a038a801515611e8057fe5b604087015188510908602085015109905087801515611e9b57fe5b88801515611ea557fe5b6060850151602087015109890382089050600088801515611ec257fe5b89801515611ecc57fe5b8b8f098551099297509095509093505050505b9750975097945050505050565b60008080851515611f0457508691508590508461201f565b600084801515611f1057fe5b898a099050600085801515611f2157fe5b898a099050600086801515611f3257fe5b898a099050600087801515611f4357fe5b88801515611f4d57fe5b848e096004099050600088801515611f6157fe5b89801515611f6b57fe5b8a801515611f7557fe5b8586098c098a801515611f8457fe5b8760030908905088801515611f9557fe5b89801515611f9f57fe5b8384088a038a801515611fae57fe5b83840908945088801515611fbe57fe5b89801515611fc857fe5b8a801515611fd257fe5b8687096008098a038a801515611fe457fe5b8b801515611fee57fe5b888d03860884090893508880151561200257fe5b8980151561200c57fe5b8c8e096002099497509295509293505050505b955095509592505050565b6000821580159061203b5750818314155b801561204657508115155b151561209c576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c6964206e756d626572000000000000000000000000000000000000604482015290519081900360640190fd5b6000600183825b86156120e55786828115156120b457fe5b04905082868015156120c257fe5b878015156120cc57fe5b85840988038608828902909303979094509192506120a3565b509195945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061213157805160ff191683800117855561215e565b8280016001018555821561215e579182015b8281111561215e578251825591602001919060010190612143565b5061216a9291506121ac565b5090565b60e0604051908101604052806007906020820280388339509192915050565b6080604051908101604052806004906020820280388339509192915050565b6121c691905b8082111561216a57600081556001016121b2565b9056fea165627a7a72305820f7baa079dfa9bb2ce0c0cea3829ff84c94e79d5b0e4388a6003334cebaf9ba9c0029";

    public static final String FUNC_GX = "GX";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETVOLUMEHASH = "getVolumeHash";

    public static final String FUNC_ADDVOLUME = "addVolume";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_BB = "BB";

    public static final String FUNC_GETVOLUMENAME = "getVolumeName";

    public static final String FUNC_GY = "GY";

    public static final String FUNC_GETVOLUMETIME = "getVolumeTime";

    public static final String FUNC_SHAREKEY = "shareKey";

    public static final String FUNC_AA = "AA";

    public static final String FUNC_GETREENCRYPTEDKEY = "getReEncryptedKey";

    public static final String FUNC_CREATEDATASET = "createDataSet";

    public static final String FUNC_GETAMOUNT = "getAmount";

    public static final String FUNC_PP = "PP";

    public static final Event SHAREKEY_EVENT = new Event("ShareKey", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADDVOLUME_EVENT = new Event("AddVolume", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEDATASET_EVENT = new Event("CreateDataSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected DataSets_sol_DataSets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DataSets_sol_DataSets(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DataSets_sol_DataSets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DataSets_sol_DataSets(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> GX() {
        final Function function = new Function(FUNC_GX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVolumeHash(Utf8String _key, Uint256 _volume) {
        final Function function = new Function(FUNC_GETVOLUMEHASH, 
                Arrays.<Type>asList(_key, _volume), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addVolume(Utf8String _key, Utf8String _name, Utf8String _hash) {
        final Function function = new Function(
                FUNC_ADDVOLUME, 
                Arrays.<Type>asList(_key, _name, _hash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> getOwner(Utf8String _key) {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(_key), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> BB() {
        final Function function = new Function(FUNC_BB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVolumeName(Utf8String _key, Uint256 _volume) {
        final Function function = new Function(FUNC_GETVOLUMENAME, 
                Arrays.<Type>asList(_key, _volume), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> GY() {
        final Function function = new Function(FUNC_GY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getVolumeTime(Utf8String _key, Uint256 _volume) {
        final Function function = new Function(FUNC_GETVOLUMETIME, 
                Arrays.<Type>asList(_key, _volume), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> shareKey(Utf8String _key, Address _to, Uint256 _reKey, Uint256 _internalPublicKeyX, Uint256 _internalPublicKeyY) {
        final Function function = new Function(
                FUNC_SHAREKEY, 
                Arrays.<Type>asList(_key, _to, _reKey, _internalPublicKeyX, _internalPublicKeyY), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> AA() {
        final Function function = new Function(FUNC_AA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray7<Uint256>> getReEncryptedKey(Address _addr, Utf8String _key) {
        final Function function = new Function(FUNC_GETREENCRYPTEDKEY, 
                Arrays.<Type>asList(_addr, _key), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray7<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createDataSet(Utf8String _key, Uint256 _ex, Uint256 _ey, Uint256 _vx, Uint256 _vy, Uint256 _s) {
        final Function function = new Function(
                FUNC_CREATEDATASET, 
                Arrays.<Type>asList(_key, _ex, _ey, _vx, _vy, _s), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getAmount(Utf8String _key) {
        final Function function = new Function(FUNC_GETAMOUNT, 
                Arrays.<Type>asList(_key), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> PP() {
        final Function function = new Function(FUNC_PP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<ShareKeyEventResponse> getShareKeyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHAREKEY_EVENT, transactionReceipt);
        ArrayList<ShareKeyEventResponse> responses = new ArrayList<ShareKeyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShareKeyEventResponse typedResponse = new ShareKeyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse._to = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ShareKeyEventResponse> shareKeyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ShareKeyEventResponse>() {
            @Override
            public ShareKeyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SHAREKEY_EVENT, log);
                ShareKeyEventResponse typedResponse = new ShareKeyEventResponse();
                typedResponse.log = log;
                typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse._to = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ShareKeyEventResponse> shareKeyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SHAREKEY_EVENT));
        return shareKeyEventFlowable(filter);
    }

    public List<AddVolumeEventResponse> getAddVolumeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDVOLUME_EVENT, transactionReceipt);
        ArrayList<AddVolumeEventResponse> responses = new ArrayList<AddVolumeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddVolumeEventResponse typedResponse = new AddVolumeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse._volume = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse._name = (Utf8String) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddVolumeEventResponse> addVolumeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddVolumeEventResponse>() {
            @Override
            public AddVolumeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDVOLUME_EVENT, log);
                AddVolumeEventResponse typedResponse = new AddVolumeEventResponse();
                typedResponse.log = log;
                typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse._volume = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse._name = (Utf8String) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<AddVolumeEventResponse> addVolumeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDVOLUME_EVENT));
        return addVolumeEventFlowable(filter);
    }

    public List<CreateDataSetEventResponse> getCreateDataSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASET_EVENT, transactionReceipt);
        ArrayList<CreateDataSetEventResponse> responses = new ArrayList<CreateDataSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateDataSetEventResponse typedResponse = new CreateDataSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateDataSetEventResponse> createDataSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateDataSetEventResponse>() {
            @Override
            public CreateDataSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEDATASET_EVENT, log);
                CreateDataSetEventResponse typedResponse = new CreateDataSetEventResponse();
                typedResponse.log = log;
                typedResponse._key = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CreateDataSetEventResponse> createDataSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEDATASET_EVENT));
        return createDataSetEventFlowable(filter);
    }

    @Deprecated
    public static DataSets_sol_DataSets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataSets_sol_DataSets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DataSets_sol_DataSets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataSets_sol_DataSets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DataSets_sol_DataSets load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DataSets_sol_DataSets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DataSets_sol_DataSets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DataSets_sol_DataSets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DataSets_sol_DataSets> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataSets_sol_DataSets.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DataSets_sol_DataSets> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataSets_sol_DataSets.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataSets_sol_DataSets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataSets_sol_DataSets.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataSets_sol_DataSets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataSets_sol_DataSets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ShareKeyEventResponse {
        public Log log;

        public Utf8String _key;

        public Address _to;
    }

    public static class AddVolumeEventResponse {
        public Log log;

        public Utf8String _key;

        public Uint256 _volume;

        public Utf8String _name;
    }

    public static class CreateDataSetEventResponse {
        public Log log;

        public Utf8String _key;
    }
}
